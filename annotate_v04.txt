import sys
import os
import json
from PyQt6.QtCore import Qt, QSize
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QFileDialog, QVBoxLayout, QHBoxLayout, QGridLayout,
    QWidget, QPushButton, QLabel, QListWidget, QRadioButton, QButtonGroup, QSizePolicy, QListWidgetItem, QSpacerItem
)
from PyQt6.QtGui import QPixmap, QAction, QKeySequence
import fitz  # PyMuPDF\
from collections import defaultdict

'''
Annotation app:
1. Open directory and list pdf files in the left widget
2. Click on filename to open it in viewer
3. Browse through pages
4. Select the start and end pages for the required classes
5. Save the classwise page information in json file
'''
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Annotation app")
        # self.setGeometry(50, 50, 1000, 600)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QHBoxLayout()
        self.central_widget.setLayout(self.layout)
        

        # Folder list
        self.file_list = QListWidget()
        self.file_list.itemClicked.connect(self.load_pdf_from_list)
        self.file_list.setFixedWidth(250)
        self.layout.addWidget(self.file_list)

        # PDF viewer
        # pdf_viewer = QWidget()
        # pdf_viewer.setFixedWidth(500)

        # self.viewer_layout = QVBoxLayout(pdf_viewer)
        # pdf_viewer.setLayout(self.viewer_layout)
        # self.layout.addWidget(pdf_viewer, alignment=Qt.AlignmentFlag.AlignCenter)

        # self.viewer_layout.maximumSize()
        self.page_label = QLabel()
        self.page_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.page_label.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self.layout.addWidget(self.page_label, alignment=Qt.AlignmentFlag.AlignCenter)
        # self.viewer_layout.addWidget(self.page_label)

        # Navigation and marking buttons
        # self.nav_button_layout = QHBoxLayout()
        # self.nav_button_layout.setContentsMargins(0, 0, 0, 0)
        # self.nav_button_layout.setSpacing(2)
        # self.button_layout.minimumSize()
        # self.layout.addLayout(self.button_layout)

        # self.button_section = QWidget()
        # self.button_section.setFixedWidth(200)  # Set minimum width for button section

        self.prev_button = QPushButton("<Previous Page")
        self.prev_button.clicked.connect(self.prev_page)
        # self.prev_button.resize(100,100)
        self.prev_button.setFixedSize(QSize(100, 30))
        # self.prev_button.setMinimumSize(100,20)
        # self.nav_button_layout.addWidget(self.prev_button)

        self.next_button = QPushButton("Next Page>")
        self.next_button.clicked.connect(self.next_page)
        # self.next_button.resize(100,100)
        self.next_button.setFixedSize(QSize(100, 30))
        # self.next_button.move(0,100)
        # self.next_button.setMinimumSize(100,20)
        # self.nav_button_layout.addWidget(self.next_button)
        self.layout.addWidget(self.prev_button,  alignment=Qt.AlignmentFlag.AlignRight)
        self.layout.addWidget(self.next_button)


        # self.layout.addLayout(self.nav_button_layout)


        ######## Adding buttons 
        button_container1 = QWidget()
        button_container2 = QWidget()
        # button_container1.setFixedWidth(100)
        # button_container2.setFixedWidth(100)
        self.button_layout1 = QVBoxLayout()
        button_container1.setLayout(self.button_layout1)
        self.layout.addWidget(button_container1, alignment=Qt.AlignmentFlag.AlignRight)
        self.button_layout2 = QVBoxLayout()
        button_container2.setLayout(self.button_layout2)
        self.layout.addWidget(button_container2, alignment=Qt.AlignmentFlag.AlignLeft)



        #########################################################################333
        # Creating class radio buttons group
        self.radio_button_group = QButtonGroup(self)

        # Creating radio buttons
        self.document_types = [
        "achform", "appraisal", "buydown", "closingdisclosure", "condopolicy",
        "constructionloanagreement", "creditreport", "dpamortgage", "dufundings",
        "earthquakeinsurance", "fhamortgageinsurancecertificate", "firstpayment",
        "floodinsurancecertificate", "floodinsurancepolicy", "ieads", "legaldescription",
        "loanapplication", "loandeliverychecklist", "lpfindings", "mailaddress", "mortgage",
        "notedpa", "note", "patriotactdisclosure", "paymenthistory", "pmicertificate",
        "pmidisclosurestatement", "propertyinsurancepolicy", "ridertonote",
        "supplementalconsumerinformationform", "usdaconditionalcommitment", "w9",
        "windstorminsurance", "witax"]

        
        ########### Buttons
        self.achform_start_radio_button = QRadioButton("achform Start")
        self.achform_start_radio_button.clicked.connect(lambda: self.mark_page("achform", "start"))
        self.achform_end_radio_button = QRadioButton("achform End")
        self.achform_end_radio_button.clicked.connect(lambda: self.mark_page("achform", "end"))
        self.appraisal_start_radio_button = QRadioButton("appraisal Start")
        self.appraisal_start_radio_button.clicked.connect(lambda: self.mark_page("appraisal", "start"))
        self.appraisal_end_radio_button = QRadioButton("appraisal End")
        self.appraisal_end_radio_button.clicked.connect(lambda: self.mark_page("appraisal", "end"))
        self.buydown_start_radio_button = QRadioButton("buydown Start")
        self.buydown_start_radio_button.clicked.connect(lambda: self.mark_page("buydown", "start"))
        self.buydown_end_radio_button = QRadioButton("buydown End")
        self.buydown_end_radio_button.clicked.connect(lambda: self.mark_page("buydown", "end"))
        self.closingdisclosure_start_radio_button = QRadioButton("closingdisclosure Start")
        self.closingdisclosure_start_radio_button.clicked.connect(lambda: self.mark_page("closingdisclosure", "start"))
        self.closingdisclosure_end_radio_button = QRadioButton("closingdisclosure End")
        self.closingdisclosure_end_radio_button.clicked.connect(lambda: self.mark_page("closingdisclosure", "end"))
        self.condopolicy_start_radio_button = QRadioButton("condopolicy Start")
        self.condopolicy_start_radio_button.clicked.connect(lambda: self.mark_page("condopolicy", "start"))
        self.condopolicy_end_radio_button = QRadioButton("condopolicy End")
        self.condopolicy_end_radio_button.clicked.connect(lambda: self.mark_page("condopolicy", "end"))
        self.constructionloanagreement_start_radio_button = QRadioButton("constructionloanagreement Start")
        self.constructionloanagreement_start_radio_button.clicked.connect(lambda: self.mark_page("constructionloanagreement", "start"))
        self.constructionloanagreement_end_radio_button = QRadioButton("constructionloanagreement End")
        self.constructionloanagreement_end_radio_button.clicked.connect(lambda: self.mark_page("constructionloanagreement", "end"))
        self.creditreport_start_radio_button = QRadioButton("creditreport Start")
        self.creditreport_start_radio_button.clicked.connect(lambda: self.mark_page("creditreport", "start"))
        self.creditreport_end_radio_button = QRadioButton("creditreport End")
        self.creditreport_end_radio_button.clicked.connect(lambda: self.mark_page("creditreport", "end"))
        self.dpamortgage_start_radio_button = QRadioButton("dpamortgage Start")
        self.dpamortgage_start_radio_button.clicked.connect(lambda: self.mark_page("dpamortgage", "start"))
        self.dpamortgage_end_radio_button = QRadioButton("dpamortgage End")
        self.dpamortgage_end_radio_button.clicked.connect(lambda: self.mark_page("dpamortgage", "end"))
        self.dufundings_start_radio_button = QRadioButton("dufundings Start")
        self.dufundings_start_radio_button.clicked.connect(lambda: self.mark_page("dufundings", "start"))
        self.dufundings_end_radio_button = QRadioButton("dufundings End")
        self.dufundings_end_radio_button.clicked.connect(lambda: self.mark_page("dufundings", "end"))
        self.earthquakeinsurance_start_radio_button = QRadioButton("earthquakeinsurance Start")
        self.earthquakeinsurance_start_radio_button.clicked.connect(lambda: self.mark_page("earthquakeinsurance", "start"))
        self.earthquakeinsurance_end_radio_button = QRadioButton("earthquakeinsurance End")
        self.earthquakeinsurance_end_radio_button.clicked.connect(lambda: self.mark_page("earthquakeinsurance", "end"))
        self.fhamortgageinsurancecertificate_start_radio_button = QRadioButton("fhamortgageinsurancecertificate Start")
        self.fhamortgageinsurancecertificate_start_radio_button.clicked.connect(lambda: self.mark_page("fhamortgageinsurancecertificate", "start"))
        self.fhamortgageinsurancecertificate_end_radio_button = QRadioButton("fhamortgageinsurancecertificate End")
        self.fhamortgageinsurancecertificate_end_radio_button.clicked.connect(lambda: self.mark_page("fhamortgageinsurancecertificate", "end"))
        self.firstpayment_start_radio_button = QRadioButton("firstpayment Start")
        self.firstpayment_start_radio_button.clicked.connect(lambda: self.mark_page("firstpayment", "start"))
        self.firstpayment_end_radio_button = QRadioButton("firstpayment End")
        self.firstpayment_end_radio_button.clicked.connect(lambda: self.mark_page("firstpayment", "end"))
        self.floodinsurancecertificate_start_radio_button = QRadioButton("floodinsurancecertificate Start")
        self.floodinsurancecertificate_start_radio_button.clicked.connect(lambda: self.mark_page("floodinsurancecertificate", "start"))
        self.floodinsurancecertificate_end_radio_button = QRadioButton("floodinsurancecertificate End")
        self.floodinsurancecertificate_end_radio_button.clicked.connect(lambda: self.mark_page("floodinsurancecertificate", "end"))
        self.floodinsurancepolicy_start_radio_button = QRadioButton("floodinsurancepolicy Start")
        self.floodinsurancepolicy_start_radio_button.clicked.connect(lambda: self.mark_page("floodinsurancepolicy", "start"))
        self.floodinsurancepolicy_end_radio_button = QRadioButton("floodinsurancepolicy End")
        self.floodinsurancepolicy_end_radio_button.clicked.connect(lambda: self.mark_page("floodinsurancepolicy", "end"))
        self.ieads_start_radio_button = QRadioButton("ieads Start")
        self.ieads_start_radio_button.clicked.connect(lambda: self.mark_page("ieads", "start"))
        self.ieads_end_radio_button = QRadioButton("ieads End")
        self.ieads_end_radio_button.clicked.connect(lambda: self.mark_page("ieads", "end"))
        #
        self.legaldescription_start_radio_button = QRadioButton("legaldescription Start")
        self.legaldescription_start_radio_button.clicked.connect(lambda: self.mark_page("legaldescription", "start"))
        self.legaldescription_end_radio_button = QRadioButton("legaldescription End")
        self.legaldescription_end_radio_button.clicked.connect(lambda: self.mark_page("legaldescription", "end"))
        self.loanapplication_start_radio_button = QRadioButton("loanapplication Start")
        self.loanapplication_start_radio_button.clicked.connect(lambda: self.mark_page("loanapplication", "start"))
        self.loanapplication_end_radio_button = QRadioButton("loanapplication End")
        self.loanapplication_end_radio_button.clicked.connect(lambda: self.mark_page("loanapplication", "end"))
        self.loandeliverychecklist_start_radio_button = QRadioButton("loandeliverychecklist Start")
        self.loandeliverychecklist_start_radio_button.clicked.connect(lambda: self.mark_page("loandeliverychecklist", "start"))
        self.loandeliverychecklist_end_radio_button = QRadioButton("loandeliverychecklist End")
        self.loandeliverychecklist_end_radio_button.clicked.connect(lambda: self.mark_page("loandeliverychecklist", "end"))
        self.lpfindings_start_radio_button = QRadioButton("lpfindings Start")
        self.lpfindings_start_radio_button.clicked.connect(lambda: self.mark_page("lpfindings", "start"))
        self.lpfindings_end_radio_button = QRadioButton("lpfindings End")
        self.lpfindings_end_radio_button.clicked.connect(lambda: self.mark_page("lpfindings", "end"))
        self.mailaddress_start_radio_button = QRadioButton("mailaddress Start")
        self.mailaddress_start_radio_button.clicked.connect(lambda: self.mark_page("mailaddress", "start"))
        self.mailaddress_end_radio_button = QRadioButton("mailaddress End")
        self.mailaddress_end_radio_button.clicked.connect(lambda: self.mark_page("mailaddress", "end"))
        self.mortgage_start_radio_button = QRadioButton("mortgage Start")
        self.mortgage_start_radio_button.clicked.connect(lambda: self.mark_page("mortgage", "start"))
        self.mortgage_end_radio_button = QRadioButton("mortgage End")
        self.mortgage_end_radio_button.clicked.connect(lambda: self.mark_page("mortgage", "end"))
        self.notedpa_start_radio_button = QRadioButton("notedpa Start")
        self.notedpa_start_radio_button.clicked.connect(lambda: self.mark_page("notedpa", "start"))
        self.notedpa_end_radio_button = QRadioButton("notedpa End")
        self.notedpa_end_radio_button.clicked.connect(lambda: self.mark_page("notedpa", "end"))
        self.note_start_radio_button = QRadioButton("note Start")
        self.note_start_radio_button.clicked.connect(lambda: self.mark_page("note", "start"))
        self.note_end_radio_button = QRadioButton("note End")
        self.note_end_radio_button.clicked.connect(lambda: self.mark_page("note", "end"))
        self.patriotactdisclosure_start_radio_button = QRadioButton("patriotactdisclosure Start")
        self.patriotactdisclosure_start_radio_button.clicked.connect(lambda: self.mark_page("patriotactdisclosure", "start"))
        self.patriotactdisclosure_end_radio_button = QRadioButton("patriotactdisclosure End")
        self.patriotactdisclosure_end_radio_button.clicked.connect(lambda: self.mark_page("patriotactdisclosure", "end"))
        self.paymenthistory_start_radio_button = QRadioButton("paymenthistory Start")
        self.paymenthistory_start_radio_button.clicked.connect(lambda: self.mark_page("paymenthistory", "start"))
        self.paymenthistory_end_radio_button = QRadioButton("paymenthistory End")
        self.paymenthistory_end_radio_button.clicked.connect(lambda: self.mark_page("paymenthistory", "end"))
        self.pmicertificate_start_radio_button = QRadioButton("pmicertificate Start")
        self.pmicertificate_start_radio_button.clicked.connect(lambda: self.mark_page("pmicertificate", "start"))
        self.pmicertificate_end_radio_button = QRadioButton("pmicertificate End")
        self.pmicertificate_end_radio_button.clicked.connect(lambda: self.mark_page("pmicertificate", "end"))
        self.pmidisclosurestatement_start_radio_button = QRadioButton("pmidisclosurestatement Start")
        self.pmidisclosurestatement_start_radio_button.clicked.connect(lambda: self.mark_page("pmidisclosurestatement", "start"))
        self.pmidisclosurestatement_end_radio_button = QRadioButton("pmidisclosurestatement End")
        self.pmidisclosurestatement_end_radio_button.clicked.connect(lambda: self.mark_page("pmidisclosurestatement", "end"))
        self.propertyinsurancepolicy_start_radio_button = QRadioButton("propertyinsurancepolicy Start")
        self.propertyinsurancepolicy_start_radio_button.clicked.connect(lambda: self.mark_page("propertyinsurancepolicy", "start"))
        self.propertyinsurancepolicy_end_radio_button = QRadioButton("propertyinsurancepolicy End")
        self.propertyinsurancepolicy_end_radio_button.clicked.connect(lambda: self.mark_page("propertyinsurancepolicy", "end"))
        self.ridertonote_start_radio_button = QRadioButton("ridertonote Start")
        self.ridertonote_start_radio_button.clicked.connect(lambda: self.mark_page("ridertonote", "start"))
        self.ridertonote_end_radio_button = QRadioButton("ridertonote End")
        self.ridertonote_end_radio_button.clicked.connect(lambda: self.mark_page("ridertonote", "end"))
        self.supplementalconsumerinformationform_start_radio_button = QRadioButton("supplementalconsumerinformationform Start")
        self.supplementalconsumerinformationform_start_radio_button.clicked.connect(lambda: self.mark_page("supplementalconsumerinformationform", "start"))
        self.supplementalconsumerinformationform_end_radio_button = QRadioButton("supplementalconsumerinformationform End")
        self.supplementalconsumerinformationform_end_radio_button.clicked.connect(lambda: self.mark_page("supplementalconsumerinformationform", "end"))
        self.usdaconditionalcommitment_start_radio_button = QRadioButton("usdaconditionalcommitment Start")
        self.usdaconditionalcommitment_start_radio_button.clicked.connect(lambda: self.mark_page("usdaconditionalcommitment", "start"))
        self.usdaconditionalcommitment_end_radio_button = QRadioButton("usdaconditionalcommitment End")
        self.usdaconditionalcommitment_end_radio_button.clicked.connect(lambda: self.mark_page("usdaconditionalcommitment", "end"))
        self.w9_start_radio_button = QRadioButton("w9 Start")
        self.w9_start_radio_button.clicked.connect(lambda: self.mark_page("w9", "start"))
        self.w9_end_radio_button = QRadioButton("w9 End")
        self.w9_end_radio_button.clicked.connect(lambda: self.mark_page("w9", "end"))
        self.windstorminsurance_start_radio_button = QRadioButton("windstorminsurance Start")
        self.windstorminsurance_start_radio_button.clicked.connect(lambda: self.mark_page("windstorminsurance", "start"))
        self.windstorminsurance_end_radio_button = QRadioButton("windstorminsurance End")
        self.windstorminsurance_end_radio_button.clicked.connect(lambda: self.mark_page("windstorminsurance", "end"))
        self.witax_start_radio_button = QRadioButton("witax Start")
        self.witax_start_radio_button.clicked.connect(lambda: self.mark_page("witax", "start"))
        self.witax_end_radio_button = QRadioButton("witax End")
        self.witax_end_radio_button.clicked.connect(lambda: self.mark_page("witax", "end"))


        # Adding buttons to button layout
        self.button_layout1.addWidget(self.achform_start_radio_button)
        self.button_layout1.addWidget(self.achform_end_radio_button)
        self.button_layout1.addWidget(self.appraisal_start_radio_button)
        self.button_layout1.addWidget(self.appraisal_end_radio_button)
        self.button_layout1.addWidget(self.buydown_start_radio_button)
        self.button_layout1.addWidget(self.buydown_end_radio_button)
        self.button_layout1.addWidget(self.closingdisclosure_start_radio_button)
        self.button_layout1.addWidget(self.closingdisclosure_end_radio_button)
        self.button_layout1.addWidget(self.condopolicy_start_radio_button)
        self.button_layout1.addWidget(self.condopolicy_end_radio_button)
        self.button_layout1.addWidget(self.constructionloanagreement_start_radio_button)
        self.button_layout1.addWidget(self.constructionloanagreement_end_radio_button)
        self.button_layout1.addWidget(self.creditreport_start_radio_button)
        self.button_layout1.addWidget(self.creditreport_end_radio_button)
        self.button_layout1.addWidget(self.dpamortgage_start_radio_button)
        self.button_layout1.addWidget(self.dpamortgage_end_radio_button)
        self.button_layout1.addWidget(self.dufundings_start_radio_button)
        self.button_layout1.addWidget(self.dufundings_end_radio_button)
        self.button_layout1.addWidget(self.earthquakeinsurance_start_radio_button)
        self.button_layout1.addWidget(self.earthquakeinsurance_end_radio_button)
        self.button_layout1.addWidget(self.fhamortgageinsurancecertificate_start_radio_button)
        self.button_layout1.addWidget(self.fhamortgageinsurancecertificate_end_radio_button)
        self.button_layout1.addWidget(self.firstpayment_start_radio_button)
        self.button_layout1.addWidget(self.firstpayment_end_radio_button)
        self.button_layout1.addWidget(self.floodinsurancecertificate_start_radio_button)
        self.button_layout1.addWidget(self.floodinsurancecertificate_end_radio_button)
        self.button_layout1.addWidget(self.floodinsurancepolicy_start_radio_button)
        self.button_layout1.addWidget(self.floodinsurancepolicy_end_radio_button)
        self.button_layout1.addWidget(self.ieads_start_radio_button)
        self.button_layout1.addWidget(self.ieads_end_radio_button)
        #
        self.button_layout2.addWidget(self.legaldescription_start_radio_button)
        self.button_layout2.addWidget(self.legaldescription_end_radio_button)
        self.button_layout2.addWidget(self.loanapplication_start_radio_button)
        self.button_layout2.addWidget(self.loanapplication_end_radio_button)
        self.button_layout2.addWidget(self.loandeliverychecklist_start_radio_button)
        self.button_layout2.addWidget(self.loandeliverychecklist_end_radio_button)
        self.button_layout2.addWidget(self.lpfindings_start_radio_button)
        self.button_layout2.addWidget(self.lpfindings_end_radio_button)
        self.button_layout2.addWidget(self.mailaddress_start_radio_button)
        self.button_layout2.addWidget(self.mailaddress_end_radio_button)
        self.button_layout2.addWidget(self.mortgage_start_radio_button)
        self.button_layout2.addWidget(self.mortgage_end_radio_button)
        self.button_layout2.addWidget(self.notedpa_start_radio_button)
        self.button_layout2.addWidget(self.notedpa_end_radio_button)
        self.button_layout2.addWidget(self.note_start_radio_button)
        self.button_layout2.addWidget(self.note_end_radio_button)
        self.button_layout2.addWidget(self.patriotactdisclosure_start_radio_button)
        self.button_layout2.addWidget(self.patriotactdisclosure_end_radio_button)
        self.button_layout2.addWidget(self.paymenthistory_start_radio_button)
        self.button_layout2.addWidget(self.paymenthistory_end_radio_button)
        self.button_layout2.addWidget(self.pmicertificate_start_radio_button)
        self.button_layout2.addWidget(self.pmicertificate_end_radio_button)
        self.button_layout2.addWidget(self.pmidisclosurestatement_start_radio_button)
        self.button_layout2.addWidget(self.pmidisclosurestatement_end_radio_button)
        self.button_layout2.addWidget(self.propertyinsurancepolicy_start_radio_button)
        self.button_layout2.addWidget(self.propertyinsurancepolicy_end_radio_button)
        self.button_layout2.addWidget(self.ridertonote_start_radio_button)
        self.button_layout2.addWidget(self.ridertonote_end_radio_button)
        self.button_layout2.addWidget(self.supplementalconsumerinformationform_start_radio_button)
        self.button_layout2.addWidget(self.supplementalconsumerinformationform_end_radio_button)
        self.button_layout2.addWidget(self.usdaconditionalcommitment_start_radio_button)
        self.button_layout2.addWidget(self.usdaconditionalcommitment_end_radio_button)
        self.button_layout2.addWidget(self.w9_start_radio_button)
        self.button_layout2.addWidget(self.w9_end_radio_button)
        self.button_layout2.addWidget(self.windstorminsurance_start_radio_button)
        self.button_layout2.addWidget(self.windstorminsurance_end_radio_button)
        self.button_layout2.addWidget(self.witax_start_radio_button)
        self.button_layout2.addWidget(self.witax_end_radio_button)

        self.save_button = QPushButton("Save Marks")
        self.save_button.clicked.connect(self.save_marks)
        self.save_button.setFixedSize(QSize(100, 30))
        self.button_layout1.addWidget(self.save_button)
        
        # self.layout.addLayout(self.viewer_layout)
        # # self.layout.addItem(QSpacerItem(20, 0, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))
        # self.layout.addLayout(self.button_layout1)
        # # self.layout.addItem(QSpacerItem(40, 0, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Minimum))
        # self.layout.addLayout(self.button_layout2)

    
        # self.load_button = QPushButton("Open PDF")
        # self.load_button.clicked.connect(self.open_pdf)
        # self.button_layout.addWidget(self.load_button)

        self.current_file = None
        self.current_page = 0
        self.total_pages = 0
        self.marks = {
            "achform" : [],
            "appraisal": [],
            "buydown": [],
           "closingdisclosure": [],
            "condopolicy": [],
           "constructionloanagreement": [],
            "creditreport": [],
            "dpamortgage": [],
            "dufundings": [],
            "earthquakeinsurance": [],
            "fhamortgageinsurancecertificate": [],
            "firstpayment": [],
            "floodinsurancecertificate": [],
            "floodinsurancepolicy": [],
           "ieads": [],
           "legaldescription": [],
            "loanapplication": [],
            "loandeliverychecklist": [],
            "lpfindings": [],
            "mailaddress": [],
            "mortgage": [],
            "notedpa": [],
            "note": [],
            "patriotactdisclosure": [],
            "paymenthistory": [],
            "pmicertificate": [],
            "pmidisclosurestatement": [],
            "propertyinsurancepolicy": [],
            "ridertonote": [],
            "supplementalconsumerinformationform": [],
            "usdaconditionalcommitment": [],
            "w9": [],
            "windstorminsurance": [],
            'witax': []
        }

        self.create_file_menu()


    def open_pdf(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Open PDF File", "", "PDF Files (*.pdf)")
        if file_path:
            self.current_file = file_path
            self.current_page = 0
            self.load_pdf(file_path)
            self.total_pages = fitz.open(file_path).page_count

    def load_pdf(self, file_path):
        self.display_pdf(file_path, self.current_page)
        self.clear_marks()

    def display_pdf(self, file_path, page_number):
        doc = fitz.open(file_path)
        pixmap = self.render_page_as_pixmap(doc, page_number)
        self.page_label.setPixmap(pixmap)
        self.update_radio_buttons()

    def render_page_as_pixmap(self, doc, page_number):
        page = doc.load_page(page_number)
        pixmap = page.get_pixmap()
        img_bytes = pixmap.tobytes()
        image = QPixmap()
        image.loadFromData(img_bytes)
        return image

    def prev_page(self):
        if self.current_file and self.current_page > 0:
            self.current_page -= 1
            self.display_pdf(self.current_file, self.current_page)

    def next_page(self):
        if self.current_file and self.current_page < self.total_pages - 1:
            self.current_page += 1
            self.display_pdf(self.current_file, self.current_page)

    def create_file_menu(self):
        menubar = self.menuBar()
        file_menu = menubar.addMenu('File')

        # Open directory
        open_action = QAction('Open Directory', self)
        open_action.triggered.connect(self.open_directory_dialog)
        file_menu.addAction(open_action)

        # Navigation
        next_page_action = QAction("Next Page", self)
        next_page_action.setShortcut(QKeySequence("Right"))
        next_page_action.triggered.connect(self.next_page)
        file_menu.addAction(next_page_action)

        prev_page_action = QAction("Previous Page", self)
        prev_page_action.setShortcut(QKeySequence("Left"))
        prev_page_action.triggered.connect(self.prev_page)
        file_menu.addAction(prev_page_action)

        # Exit application
        close_action = QAction('Exit', self)
        close_action.triggered.connect(self.close_application)
        file_menu.addAction(close_action)

    # Close application
    def close_application(self):
        sys.exit()

    def open_directory_dialog(self):
        directory = QFileDialog.getExistingDirectory(self, "Select Directory")
        if directory:
            self.populate_file_list(directory)

    def populate_file_list(self, directory):
        self.file_list.clear()
        for filename in os.listdir(directory):
            if filename.lower().endswith('.pdf'):
                # self.file_list.addItem(os.path.join(directory, filename))
                filepath = os.path.join(directory, filename)
                item = QListWidgetItem(filename)
                item.setData(Qt.ItemDataRole.UserRole, filepath)
                self.file_list.addItem(item)
    
    def load_pdf_from_list(self, item):
        # filepath = item.text()
        filepath = item.data(Qt.ItemDataRole.UserRole)
        self.current_file = filepath
        self.current_page = 0
        self.load_pdf(filepath)
        self.total_pages = fitz.open(filepath).page_count
        self.clear_marks()

    def update_radio_buttons(self):
        # Update radio buttons to reflect current page's status
        current_page_num = self.current_page + 1
        
        achform_versions = self.marks.get("achform", [])
        appraisal_versions = self.marks.get("appraisal", [])
        buydown_versions = self.marks.get("buydown", [])
        closingdisclosure_versions = self.marks.get("closingdisclosure", [])
        condopolicy_versions = self.marks.get("condopolicy", [])
        constructionloanagreement_versions = self.marks.get("constructionloanagreement", [])
        creditreport_versions = self.marks.get("creditreport", [])
        dpamortgage_versions = self.marks.get("dpamortgage", [])
        dufundings_versions = self.marks.get("dufundings", [])
        earthquakeinsurance_versions = self.marks.get("earthquakeinsurance", [])
        fhamortgageinsurancecertificate_versions = self.marks.get("fhamortgageinsurancecertificate", [])
        firstpayment_versions = self.marks.get("firstpayment", [])
        floodinsurancecertificate_versions = self.marks.get("floodinsurancecertificate", [])
        floodinsurancepolicy_versions = self.marks.get("floodinsurancepolicy", [])
        ieads_versions = self.marks.get("ieads", [])
        #
        legaldescription_versions = self.marks.get("legaldescription", [])
        loanapplication_versions = self.marks.get("loanapplication", [])
        loandeliverychecklist_versions = self.marks.get("loandeliverychecklist", [])
        lpfindings_versions = self.marks.get("lpfindings", [])
        mailaddress_versions = self.marks.get("mailaddress", [])
        mortgage_versions = self.marks.get("mortgage", [])
        notedpa_versions = self.marks.get("notedpa", [])
        note_versions = self.marks.get("note", [])
        patriotactdisclosure_versions = self.marks.get("patriotactdisclosure", [])
        paymenthistory_versions = self.marks.get("paymenthistory", [])
        pmicertificate_versions = self.marks.get("pmicertificate", [])
        pmidisclosurestatement_versions = self.marks.get("pmidisclosurestatement", [])
        propertyinsurancepolicy_versions = self.marks.get("propertyinsurancepolicy", [])
        ridertonote_versions = self.marks.get("ridertonote", [])
        supplementalconsumerinformationform_versions = self.marks.get("supplementalconsumerinformationform", [])
        usdaconditionalcommitment_versions = self.marks.get("usdaconditionalcommitment", [])
        w9_versions = self.marks.get("w9", [])
        windstorminsurance_versions = self.marks.get("windstorminsurance", [])
        witax_versions = self.marks.get("witax", [])

        # Check if current page matches any class start or end marks

        for version_achform in achform_versions:
            if current_page_num == version_achform["start"]:
                self.achform_start_radio_button.setChecked(True)
            if current_page_num == version_achform["end"]:
                self.achform_end_radio_button.setChecked(True)
        for version_achform in achform_versions:
            if current_page_num == version_achform["start"]:
                self.achform_start_radio_button.setChecked(True)
            if current_page_num == version_achform["end"]:
                self.achform_end_radio_button.setChecked(True)
        
        for version_appraisal in appraisal_versions:
            if current_page_num == version_appraisal["start"]:
                self.appraisal_start_radio_button.setChecked(True)
            if current_page_num == version_appraisal["end"]:
                self.appraisal_end_radio_button.setChecked(True)
        
        for version_buydown in buydown_versions:
            if current_page_num == version_buydown["start"]:
                self.buydown_start_radio_button.setChecked(True)
            if current_page_num == version_buydown["end"]:
                self.buydown_end_radio_button.setChecked(True)
        
        for version_closingdisclosure in closingdisclosure_versions:
            if current_page_num == version_closingdisclosure["start"]:
                self.closingdisclosure_start_radio_button.setChecked(True)
            if current_page_num == version_closingdisclosure["end"]:
                self.closingdisclosure_end_radio_button.setChecked(True)
        
        for version_condopolicy in condopolicy_versions:
            if current_page_num == version_condopolicy["start"]:
                self.condopolicy_start_radio_button.setChecked(True)
            if current_page_num == version_condopolicy["end"]:
                self.condopolicy_end_radio_button.setChecked(True)
        
        for version_constructionloanagreement in constructionloanagreement_versions:
            if current_page_num == version_constructionloanagreement["start"]:
                self.constructionloanagreement_start_radio_button.setChecked(True)
            if current_page_num == version_constructionloanagreement["end"]:
                self.constructionloanagreement_end_radio_button.setChecked(True)
        
        for version_creditreport in creditreport_versions:
            if current_page_num == version_creditreport["start"]:
                self.creditreport_start_radio_button.setChecked(True)
            if current_page_num == version_creditreport["end"]:
                self.creditreport_end_radio_button.setChecked(True)
        
        for version_dpamortgage in dpamortgage_versions:
            if current_page_num == version_dpamortgage["start"]:
                self.dpamortgage_start_radio_button.setChecked(True)
            if current_page_num == version_dpamortgage["end"]:
                self.dpamortgage_end_radio_button.setChecked(True)
        
        for version_dufundings in dufundings_versions:
            if current_page_num == version_dufundings["start"]:
                self.dufundings_start_radio_button.setChecked(True)
            if current_page_num == version_dufundings["end"]:
                self.dufundings_end_radio_button.setChecked(True)
        
        for version_earthquakeinsurance in earthquakeinsurance_versions:
            if current_page_num == version_earthquakeinsurance["start"]:
                self.earthquakeinsurance_start_radio_button.setChecked(True)
            if current_page_num == version_earthquakeinsurance["end"]:
                self.earthquakeinsurance_end_radio_button.setChecked(True)
        
        for version_fhamortgageinsurancecertificate in fhamortgageinsurancecertificate_versions:
            if current_page_num == version_fhamortgageinsurancecertificate["start"]:
                self.fhamortgageinsurancecertificate_start_radio_button.setChecked(True)
            if current_page_num == version_fhamortgageinsurancecertificate["end"]:
                self.fhamortgageinsurancecertificate_end_radio_button.setChecked(True)
        
        for version_firstpayment in firstpayment_versions:
            if current_page_num == version_firstpayment["start"]:
                self.firstpayment_start_radio_button.setChecked(True)
            if current_page_num == version_firstpayment["end"]:
                self.firstpayment_end_radio_button.setChecked(True)
        
        for version_floodinsurancecertificate in floodinsurancecertificate_versions:
            if current_page_num == version_floodinsurancecertificate["start"]:
                self.floodinsurancecertificate_start_radio_button.setChecked(True)
            if current_page_num == version_floodinsurancecertificate["end"]:
                self.floodinsurancecertificate_end_radio_button.setChecked(True)
        
        for version_floodinsurancepolicy in floodinsurancepolicy_versions:
            if current_page_num == version_floodinsurancepolicy["start"]:
                self.floodinsurancepolicy_start_radio_button.setChecked(True)
            if current_page_num == version_floodinsurancepolicy["end"]:
                self.floodinsurancepolicy_end_radio_button.setChecked(True)
        
        for version_ieads in ieads_versions:
            if current_page_num == version_ieads["start"]:
                self.ieads_start_radio_button.setChecked(True)
            if current_page_num == version_ieads["end"]:
                self.ieads_end_radio_button.setChecked(True)

        for version_legaldescription in legaldescription_versions:
            if current_page_num == version_legaldescription["start"]:
                self.legaldescription_start_radio_button.setChecked(True)
            if current_page_num == version_legaldescription["end"]:
                self.legaldescription_end_radio_button.setChecked(True)

        for version_loanapplication in loanapplication_versions:
            if current_page_num == version_loanapplication["start"]:
                self.loanapplication_start_radio_button.setChecked(True)
            if current_page_num == version_loanapplication["end"]:
                self.loanapplication_end_radio_button.setChecked(True)

        for version_loandeliverychecklist in loandeliverychecklist_versions:
            if current_page_num == version_loandeliverychecklist["start"]:
                self.loandeliverychecklist_start_radio_button.setChecked(True)
            if current_page_num == version_loandeliverychecklist["end"]:
                self.loandeliverychecklist_end_radio_button.setChecked(True)

        for version_lpfindings in lpfindings_versions:
            if current_page_num == version_lpfindings["start"]:
                self.lpfindings_start_radio_button.setChecked(True)
            if current_page_num == version_lpfindings["end"]:
                self.lpfindings_end_radio_button.setChecked(True)

        for version_mailaddress in mailaddress_versions:
            if current_page_num == version_mailaddress["start"]:
                self.mailaddress_start_radio_button.setChecked(True)
            if current_page_num == version_mailaddress["end"]:
                self.mailaddress_end_radio_button.setChecked(True)

        for version_mortgage in mortgage_versions:
            if current_page_num == version_mortgage["start"]:
                self.mortgage_start_radio_button.setChecked(True)
            if current_page_num == version_mortgage["end"]:
                self.mortgage_end_radio_button.setChecked(True)

        for version_notedpa in notedpa_versions:
            if current_page_num == version_notedpa["start"]:
                self.notedpa_start_radio_button.setChecked(True)
            if current_page_num == version_notedpa["end"]:
                self.notedpa_end_radio_button.setChecked(True)

        for version_note in note_versions:
            if current_page_num == version_note["start"]:
                self.note_start_radio_button.setChecked(True)
            if current_page_num == version_note["end"]:
                self.note_end_radio_button.setChecked(True)

        for version_patriotactdisclosure in patriotactdisclosure_versions:
            if current_page_num == version_patriotactdisclosure["start"]:
                self.patriotactdisclosure_start_radio_button.setChecked(True)
            if current_page_num == version_patriotactdisclosure["end"]:
                self.patriotactdisclosure_end_radio_button.setChecked(True)

        for version_paymenthistory in paymenthistory_versions:
            if current_page_num == version_paymenthistory["start"]:
                self.paymenthistory_start_radio_button.setChecked(True)
            if current_page_num == version_paymenthistory["end"]:
                self.paymenthistory_end_radio_button.setChecked(True)

        for version_pmicertificate in pmicertificate_versions:
            if current_page_num == version_pmicertificate["start"]:
                self.pmicertificate_start_radio_button.setChecked(True)
            if current_page_num == version_pmicertificate["end"]:
                self.pmicertificate_end_radio_button.setChecked(True)

        for version_pmidisclosurestatement in pmidisclosurestatement_versions:
            if current_page_num == version_pmidisclosurestatement["start"]:
                self.pmidisclosurestatement_start_radio_button.setChecked(True)
            if current_page_num == version_pmidisclosurestatement["end"]:
                self.pmidisclosurestatement_end_radio_button.setChecked(True)

        for version_propertyinsurancepolicy in propertyinsurancepolicy_versions:
            if current_page_num == version_propertyinsurancepolicy["start"]:
                self.propertyinsurancepolicy_start_radio_button.setChecked(True)
            if current_page_num == version_propertyinsurancepolicy["end"]:
                self.propertyinsurancepolicy_end_radio_button.setChecked(True)

        for version_ridertonote in ridertonote_versions:
            if current_page_num == version_ridertonote["start"]:
                self.ridertonote_start_radio_button.setChecked(True)
            if current_page_num == version_ridertonote["end"]:
                self.ridertonote_end_radio_button.setChecked(True)

        for version_supplementalconsumerinformationform in supplementalconsumerinformationform_versions:
            if current_page_num == version_supplementalconsumerinformationform["start"]:
                self.supplementalconsumerinformationform_start_radio_button.setChecked(True)
            if current_page_num == version_supplementalconsumerinformationform["end"]:
                self.supplementalconsumerinformationform_end_radio_button.setChecked(True)

        for version_usdaconditionalcommitment in usdaconditionalcommitment_versions:
            if current_page_num == version_usdaconditionalcommitment["start"]:
                self.usdaconditionalcommitment_start_radio_button.setChecked(True)
            if current_page_num == version_usdaconditionalcommitment["end"]:
                self.usdaconditionalcommitment_end_radio_button.setChecked(True)

        for version_w9 in w9_versions:
            if current_page_num == version_w9["start"]:
                self.w9_start_radio_button.setChecked(True)
            if current_page_num == version_w9["end"]:
                self.w9_end_radio_button.setChecked(True)

        for version_windstorminsurance in windstorminsurance_versions:
            if current_page_num == version_windstorminsurance["start"]:
                self.windstorminsurance_start_radio_button.setChecked(True)
            if current_page_num == version_windstorminsurance["end"]:
                self.windstorminsurance_end_radio_button.setChecked(True)

        for version_witax in witax_versions:
            if current_page_num == version_witax["start"]:
                self.witax_start_radio_button.setChecked(True)
            if current_page_num == version_witax["end"]:
                self.witax_end_radio_button.setChecked(True)

    def clear_marks(self):
        self.marks = {
            "achform" : [],
            "appraisal": [],
            "buydown": [],
           "closingdisclosure": [],
            "condopolicy": [],
           "constructionloanagreement": [],
            "creditreport": [],
            "dpamortgage": [],
            "dufundings": [],
            "earthquakeinsurance": [],
            "fhamortgageinsurancecertificate": [],
            "firstpayment": [],
            "floodinsurancecertificate": [],
            "floodinsurancepolicy": [],
           "ieads": [],
           "legaldescription": [],
            "loanapplication": [],
            "loandeliverychecklist": [],
            "lpfindings": [],
            "mailaddress": [],
            "mortgage": [],
            "notedpa": [],
            "note": [],
            "patriotactdisclosure": [],
            "paymenthistory": [],
            "pmicertificate": [],
            "pmidisclosurestatement": [],
            "propertyinsurancepolicy": [],
            "ridertonote": [],
            "supplementalconsumerinformationform": [],
            "usdaconditionalcommitment": [],
            "w9": [],
            "windstorminsurance": [],
            'witax': []
        }

        self.achform_start_radio_button.setChecked(False)
        self.achform_end_radio_button.setChecked(False)
        self.appraisal_start_radio_button.setChecked(False)
        self.appraisal_end_radio_button.setChecked(False)
        self.buydown_start_radio_button.setChecked(False)
        self.buydown_end_radio_button.setChecked(False)
        self.closingdisclosure_start_radio_button.setChecked(False)
        self.closingdisclosure_end_radio_button.setChecked(False)
        self.condopolicy_start_radio_button.setChecked(False)
        self.condopolicy_end_radio_button.setChecked(False)
        self.constructionloanagreement_start_radio_button.setChecked(False)
        self.constructionloanagreement_end_radio_button.setChecked(False)
        self.creditreport_start_radio_button.setChecked(False)
        self.creditreport_end_radio_button.setChecked(False)
        self.dpamortgage_start_radio_button.setChecked(False)
        self.dpamortgage_end_radio_button.setChecked(False)
        self.dufundings_start_radio_button.setChecked(False)
        self.dufundings_end_radio_button.setChecked(False)
        self.earthquakeinsurance_start_radio_button.setChecked(False)
        self.earthquakeinsurance_end_radio_button.setChecked(False)
        self.fhamortgageinsurancecertificate_start_radio_button.setChecked(False)
        self.fhamortgageinsurancecertificate_end_radio_button.setChecked(False)
        self.firstpayment_start_radio_button.setChecked(False)
        self.firstpayment_end_radio_button.setChecked(False)
        self.floodinsurancecertificate_start_radio_button.setChecked(False)
        self.floodinsurancecertificate_end_radio_button.setChecked(False)
        self.floodinsurancepolicy_start_radio_button.setChecked(False)
        self.floodinsurancepolicy_end_radio_button.setChecked(False)
        self.ieads_start_radio_button.setChecked(False)
        self.ieads_end_radio_button.setChecked(False)
        self.legaldescription_start_radio_button.setChecked(False)
        self.legaldescription_end_radio_button.setChecked(False)
        self.loanapplication_start_radio_button.setChecked(False)
        self.loanapplication_end_radio_button.setChecked(False)
        self.loandeliverychecklist_start_radio_button.setChecked(False)
        self.loandeliverychecklist_end_radio_button.setChecked(False)
        self.lpfindings_start_radio_button.setChecked(False)
        self.lpfindings_end_radio_button.setChecked(False)
        self.mailaddress_start_radio_button.setChecked(False)
        self.mailaddress_end_radio_button.setChecked(False)
        self.mortgage_start_radio_button.setChecked(False)
        self.mortgage_end_radio_button.setChecked(False)
        self.notedpa_start_radio_button.setChecked(False)
        self.notedpa_end_radio_button.setChecked(False)
        self.note_start_radio_button.setChecked(False)
        self.note_end_radio_button.setChecked(False)
        self.patriotactdisclosure_start_radio_button.setChecked(False)
        self.patriotactdisclosure_end_radio_button.setChecked(False)
        self.paymenthistory_start_radio_button.setChecked(False)
        self.paymenthistory_end_radio_button.setChecked(False)
        self.pmicertificate_start_radio_button.setChecked(False)
        self.pmicertificate_end_radio_button.setChecked(False)
        self.pmidisclosurestatement_start_radio_button.setChecked(False)
        self.pmidisclosurestatement_end_radio_button.setChecked(False)
        self.propertyinsurancepolicy_start_radio_button.setChecked(False)
        self.propertyinsurancepolicy_end_radio_button.setChecked(False)
        self.ridertonote_start_radio_button.setChecked(False)
        self.ridertonote_end_radio_button.setChecked(False)
        self.supplementalconsumerinformationform_start_radio_button.setChecked(False)
        self.supplementalconsumerinformationform_end_radio_button.setChecked(False)
        self.usdaconditionalcommitment_start_radio_button.setChecked(False)
        self.usdaconditionalcommitment_end_radio_button.setChecked(False)
        self.w9_start_radio_button.setChecked(False)
        self.w9_end_radio_button.setChecked(False)
        self.windstorminsurance_start_radio_button.setChecked(False)
        self.windstorminsurance_end_radio_button.setChecked(False)
        self.witax_start_radio_button.setChecked(False)
        self.witax_end_radio_button.setChecked(False)
        
    def mark_page(self, class_name, mark_type):
        if self.current_file:
            page_num = self.current_page + 1  # Page numbers should be 1-based

            if mark_type == "start":
                if self.marks[class_name] and self.marks[class_name][-1].get("end") is None:
                    self.marks[class_name][-1]["start"] = page_num
                else:
                    self.marks[class_name].append({"start": page_num, "end": None, "pages": []})

                print(f"Marked start of {class_name} at page {page_num}")
            
            elif mark_type == "end":
                if self.marks[class_name] and self.marks[class_name][-1].get("end") is None:
                    self.marks[class_name][-1]["end"] = page_num
                    self.marks[class_name][-1]["pages"] = list(range(self.marks[class_name][-1]["start"], page_num + 1))
                    print(f"Marked end of {class_name} at page {page_num}")

    def save_marks(self):
        if self.marks:
        # Step 1: Remove duplicates but keep the last occurrence for each 'start' value
            for className in self.marks.keys():
                indices_by_start = defaultdict(list)
                
                for idx, row in enumerate(self.marks[className]):
                    indices_by_start[row['start']].append(idx)
                
                # Identify indices to remove, keeping the last occurrence
                to_remove = []
                for indices in indices_by_start.values():
                    if len(indices) > 1:
                        to_remove.extend(indices[:-1])
                
                # Remove items in reverse order to avoid index shifting issues
                for idx in sorted(to_remove, reverse=True):
                    self.marks[className].pop(idx)

            # Step 2: Create newDict with the modified data
            newDict = {}
            for className, rows in self.marks.items():
                if rows:
                    # if len(rows) > 1:
                    for idx, row in enumerate(rows):
                        newDict[f'{className}_{(idx+1):03d}.pdf'] = row['pages']
                    # else:
                    #     newDict[f'{className}_000.pdf'] = rows[0]['pages']

            default_file_name =  self.current_file if self.current_file else ""
            save_path, _ = QFileDialog.getSaveFileName(self, "Save Marks", default_file_name, "JSON Files (*.json)")
            if save_path:
                with open(save_path, 'w') as f:
                    json.dump(newDict, f, indent=4) # save new dictionary
                print(f"Marks saved to {save_path}")

           
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())

